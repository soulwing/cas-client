<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * Copyright (C) 2006, 2007 Carl E Harris, Jr.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 -->
<project name="soulwing-casclient" default="all" basedir=".">
  <property file="build.properties"/>

  <condition property="product.jar.includes.tests.flag">
    <istrue value="${product.jar.includes.tests}"/>
  </condition>

  <path id="project.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test.classes}"/>
    <fileset dir="${vendor.lib}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${vendor.test.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="all" depends="prepare, build, test"
    description="compiles all source and runs unit tests"/>

  <target name="prepare">
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.test.classes}"/>
  </target>

  <target name="clean"
      description="cleans all compiled classes">
    <delete dir="${build.classes}"/>
    <delete dir="${build.test.classes}"/>
  </target>

  <target name="build" depends="compile-src, compile-test"
      description="compiles all source"/>

  <target name="test" depends="compile-test"
      description="runs all unit tests">
    <junit haltonfailure="true">
      <classpath refid="project.classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${build.test.classes}" includes="**/*Test.class"/>
      </batchtest>
    </junit>
  </target>

  <target name="compile-src" depends="prepare">
    <javac srcdir="${src}" destdir="${build.classes}"
        source="${source.level}" debug="${debug}">
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-deprecation"/>
      <classpath refid="project.classpath"/>
    </javac>
  </target>

  <target name="compile-test" depends="prepare">
    <javac srcdir="${test}" destdir="${build.test.classes}"
        source="${source.level}" debug="true">
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-deprecation"/>
      <classpath refid="project.classpath"/>
    </javac>
  </target>

  <target name="product" depends="product-zip, product-doc"
      description="generates all product artifacts"/> 

  <target name="product-prepare" depends="product-clean">
    <mkdir dir="${dist}"/>
  </target>

  <target name="product-clean">
    <delete dir="${dist}"/>
  </target>

  <target name="product-zip" depends="product-jar, product-javadoc"
      description="generates the product distribution zip archive">
    <zip destfile="${dist}/${product.zip}">
      <zipfileset dir="${basedir}" prefix="${product}">
        <include name="LICENSE.txt"/>
        <include name="README.dependencies.txt" />
      </zipfileset>
      <zipfileset dir="${dist}" includes="${product.jar}" prefix="${product}"/>
      <zipfileset dir="${src}" prefix="${product}/src"/>
      <zipfileset dir="${test}" prefix="${product}/test"/>
      <zipfileset dir="${javadoc}" prefix="${product}/doc/api"/>
      <zipfileset dir="${vendor.lib}" prefix="${product}/lib">
        <include name="**/*.jar"/>
      </zipfileset>
      <zipfileset dir="${vendor.test.lib}" prefix="${product}/lib">
        <include name="**/*.jar"/>
      </zipfileset>
    </zip>
  </target>

  <target name="product-jar" depends="build, product-prepare"
      description="generates the jar containing product classes">
    <jar destfile="${dist}/${product.jar}">
      <fileset dir="${build.classes}"/>
      <fileset dir="${build.test.classes}">
        <include name="**/*.class" if="product.jar.includes.tests.flag"/>
      </fileset>
    </jar>
  </target>

  <target name="product-doc" depends="product-prepare, product-javadoc"
      description="generates a WAR containing product documentation">
    <war destfile="${dist}/${product.doc.war}" webxml="${doc.web.xml}">
      <zipfileset dir="${javadoc}" prefix="api"/> 
    </war> 
  </target>
  
  <path id="source.path">
    <pathelement location="${src}"/>
    <pathelement location="${test}"/>
  </path>
  
  <target name="product-javadoc">
    <delete dir="${javadoc}"/>
    <javadoc sourcepathref="source.path" destdir="${javadoc}" 
        author="true" version="true" use="true">
      <classpath refid="project.classpath"/>
      <doctitle><![CDATA[<h1>${javadoc.title}</h1>]]></doctitle>
      <bottom><![CDATA[<i>${javadoc.footer}</i>]]></bottom>
    </javadoc>
  </target>

	<target name="install-tomcat-ext" depends="product-jar"
      description="installs the Tomcat CAS extension">
		<fail unless="catalina.home">Must set catalina.home property</fail>
	  <copy todir="${catalina.home}/server/lib">
	    <fileset dir="${dist}" includes="${product.jar}"/>
	    <fileset dir="${vendor.lib}">
	      <include name="jdom*.jar"/>
	      <include name="jakarta-oro-*.jar"/>
	    </fileset>
	  </copy>
	</target>
  
</project>
